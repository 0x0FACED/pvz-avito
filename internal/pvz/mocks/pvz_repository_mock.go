// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pvz/domain/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/pvz/domain/repository.go -destination=internal/pvz/mocks/pvz_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/0x0FACED/pvz-avito/internal/pvz/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockPVZRepository is a mock of PVZRepository interface.
type MockPVZRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPVZRepositoryMockRecorder
	isgomock struct{}
}

// MockPVZRepositoryMockRecorder is the mock recorder for MockPVZRepository.
type MockPVZRepositoryMockRecorder struct {
	mock *MockPVZRepository
}

// NewMockPVZRepository creates a new mock instance.
func NewMockPVZRepository(ctrl *gomock.Controller) *MockPVZRepository {
	mock := &MockPVZRepository{ctrl: ctrl}
	mock.recorder = &MockPVZRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPVZRepository) EXPECT() *MockPVZRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPVZRepository) Create(ctx context.Context, pvz *domain.PVZ) (*domain.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pvz)
	ret0, _ := ret[0].(*domain.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPVZRepositoryMockRecorder) Create(ctx, pvz any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPVZRepository)(nil).Create), ctx, pvz)
}

// ListWithReceptions mocks base method.
func (m *MockPVZRepository) ListWithReceptions(ctx context.Context, startDate, endDate *time.Time, page, limit int) ([]*domain.PVZWithReceptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithReceptions", ctx, startDate, endDate, page, limit)
	ret0, _ := ret[0].([]*domain.PVZWithReceptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithReceptions indicates an expected call of ListWithReceptions.
func (mr *MockPVZRepositoryMockRecorder) ListWithReceptions(ctx, startDate, endDate, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithReceptions", reflect.TypeOf((*MockPVZRepository)(nil).ListWithReceptions), ctx, startDate, endDate, page, limit)
}
