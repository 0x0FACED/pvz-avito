// Code generated by MockGen. DO NOT EDIT.
// Source: internal/product/domain/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/product/domain/repository.go -destination=internal/product/mocks/product_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/0x0FACED/pvz-avito/internal/product/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
	isgomock struct{}
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductRepository) Create(ctx context.Context, product *domain.Product) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, product)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductRepositoryMockRecorder) Create(ctx, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductRepository)(nil).Create), ctx, product)
}

// DeleteLastFromReception mocks base method.
func (m *MockProductRepository) DeleteLastFromReception(ctx context.Context, receptionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLastFromReception", ctx, receptionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLastFromReception indicates an expected call of DeleteLastFromReception.
func (mr *MockProductRepositoryMockRecorder) DeleteLastFromReception(ctx, receptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLastFromReception", reflect.TypeOf((*MockProductRepository)(nil).DeleteLastFromReception), ctx, receptionID)
}

// GetByID mocks base method.
func (m *MockProductRepository) GetByID(ctx context.Context, id string) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProductRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProductRepository)(nil).GetByID), ctx, id)
}

// GetLastByReception mocks base method.
func (m *MockProductRepository) GetLastByReception(ctx context.Context, receptionID string) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastByReception", ctx, receptionID)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastByReception indicates an expected call of GetLastByReception.
func (mr *MockProductRepositoryMockRecorder) GetLastByReception(ctx, receptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastByReception", reflect.TypeOf((*MockProductRepository)(nil).GetLastByReception), ctx, receptionID)
}

// ListByReception mocks base method.
func (m *MockProductRepository) ListByReception(ctx context.Context, receptionID string) ([]*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByReception", ctx, receptionID)
	ret0, _ := ret[0].([]*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByReception indicates an expected call of ListByReception.
func (mr *MockProductRepositoryMockRecorder) ListByReception(ctx, receptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByReception", reflect.TypeOf((*MockProductRepository)(nil).ListByReception), ctx, receptionID)
}
