// Code generated by MockGen. DO NOT EDIT.
// Source: internal/reception/domain/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/reception/domain/repository.go -destination=internal/reception/mocks/reception_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/0x0FACED/pvz-avito/internal/reception/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockReceptionRepository is a mock of ReceptionRepository interface.
type MockReceptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionRepositoryMockRecorder
	isgomock struct{}
}

// MockReceptionRepositoryMockRecorder is the mock recorder for MockReceptionRepository.
type MockReceptionRepositoryMockRecorder struct {
	mock *MockReceptionRepository
}

// NewMockReceptionRepository creates a new mock instance.
func NewMockReceptionRepository(ctrl *gomock.Controller) *MockReceptionRepository {
	mock := &MockReceptionRepository{ctrl: ctrl}
	mock.recorder = &MockReceptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceptionRepository) EXPECT() *MockReceptionRepositoryMockRecorder {
	return m.recorder
}

// CloseLastReception mocks base method.
func (m *MockReceptionRepository) CloseLastReception(ctx context.Context, pvzID string) (*domain.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseLastReception", ctx, pvzID)
	ret0, _ := ret[0].(*domain.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseLastReception indicates an expected call of CloseLastReception.
func (mr *MockReceptionRepositoryMockRecorder) CloseLastReception(ctx, pvzID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseLastReception", reflect.TypeOf((*MockReceptionRepository)(nil).CloseLastReception), ctx, pvzID)
}

// Create mocks base method.
func (m *MockReceptionRepository) Create(ctx context.Context, reception *domain.Reception) (*domain.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, reception)
	ret0, _ := ret[0].(*domain.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockReceptionRepositoryMockRecorder) Create(ctx, reception any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReceptionRepository)(nil).Create), ctx, reception)
}

// FindByID mocks base method.
func (m *MockReceptionRepository) FindByID(ctx context.Context, id string) (*domain.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*domain.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockReceptionRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockReceptionRepository)(nil).FindByID), ctx, id)
}

// FindLastOpenByPVZ mocks base method.
func (m *MockReceptionRepository) FindLastOpenByPVZ(ctx context.Context, pvzID string) (*domain.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastOpenByPVZ", ctx, pvzID)
	ret0, _ := ret[0].(*domain.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastOpenByPVZ indicates an expected call of FindLastOpenByPVZ.
func (mr *MockReceptionRepositoryMockRecorder) FindLastOpenByPVZ(ctx, pvzID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastOpenByPVZ", reflect.TypeOf((*MockReceptionRepository)(nil).FindLastOpenByPVZ), ctx, pvzID)
}

// ListByPVZ mocks base method.
func (m *MockReceptionRepository) ListByPVZ(ctx context.Context, pvzID string) ([]*domain.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByPVZ", ctx, pvzID)
	ret0, _ := ret[0].([]*domain.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByPVZ indicates an expected call of ListByPVZ.
func (mr *MockReceptionRepositoryMockRecorder) ListByPVZ(ctx, pvzID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByPVZ", reflect.TypeOf((*MockReceptionRepository)(nil).ListByPVZ), ctx, pvzID)
}
